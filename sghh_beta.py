# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bxQJtySTY-8O2qNOpjIO-nxCBRbtQ2mh
"""

import tkinter as tk
from tkinter import messagebox
from tkinter import scrolledtext
from PIL import Image, ImageTk

# Initialize scores
ac_score = 0
ho_score = 0
mn_score = 0
li_score = 0

# Initialize the list of questions and prompts
questions = [
    ("What type of sad girl are you?", ["Start Quiz"], None),
    ("Welcome to sad girl world! You have just been born.", ["Continue"], None),
    ("In school, you quickly learn that not all classes are fun. Luckily you excel in one subject:",
     ["Math", "Writing", "Art", "Science"], "AC"),
    ("You‚Äôve got a big test tomorrow morning, and spend all night studying.", ["Continue"], None),
    ("You get a 46% on your English assignment. You go home and cry yourself to sleep. How many hours do you sleep?",
     ["Caffeine is the only way I make it through the day (Under 6 hours)", "I have transcended beyond the need for sleep",
      "6-8 hours (I‚Äôm normal)", "I'm practically a cat"], "HO"),
    ("Oh no! You overslept for your next day of classes. Might as well ditch school for the day! Where do you go?",
     ["I would never ditch class", "History Museum", "Local Concert", "Rest and recharge at home"], "AC"),
    ("The next day you are called into the principal's office...", ["Continue"], None),
    (" ‚ÄúYou're never going to be successful if you keep missing class,‚Äù the principal says.", ["Argue with the pricipal"], None),
    ("You respond: I don‚Äôt even need class to get my dream job! I want to be a...",
     ["Moviestar","Doctor", "Lawyer", "Artist"], "AC"),
    ("The principal says you're disobedient AND stupid, then sends you back to class", ["Return to class"], None),
    ("Back in class your friends ask you what happened, then ask if you want to go to a movie", ["Sure"], None),
    ("What movie do you suggest attending?", ["Horror movie", "Rom com", "Drama", "Documentary"], "LI"),
    ("You go to the movie and your friends say it sucked.", ["Sorry..."], None),
    ("Luckily, they still like hanging out with you. You have the reputation in the group of being:",
     ["The mom friend", "The chill one", "The crackhead","The social butterfly"], "HO"),
    ("The years pass by, and it‚Äôs finally time to graduate high school.", ["Age"], None),
    ("You are called up to give a graduation speech. ‚ÄúI‚Äôd like to thank‚Ä¶‚Äù ",
     ["My wonderful partner for supporting me", "Nobody", "My family for supporting me", "My cat"], "LI"),
    ("You go to college and are quickly enamored by the endless opportunities that you can take advantage of", ["Continue"], None),
    ("You meet a friend who invites you to a party and decide to go. When do you show up?",
     ["I‚Äôm always the first one at the function", "For the most part, I‚Äôm on time", "Probably late", "I move on my own time"], "MN"),
    ("At the party, where are you?", ["It‚Äôs not really my scene, I‚Äôm on my phone", "The dance floor!", "Playing games and drinking", "Outside having a conversation"], "HO"),
    ("Another student comes up and starts getting to know you. He asks ‚ÄúIf you were a type of drink, what would you be?‚Äù You tell him that‚Äôs a strange question and answer:",
     ["Vodka redbull", "Chai", "Wine", "Water", "Espresso"], "HO"),
    ("You want to get out of the conversation, how do you end it?",
     ["‚ÄúMy friend‚Äôs calling, gotta go!‚Äù", "‚ÄúI have to go wash my cat‚Äù", "Walk away without saying anything", "Start acting insane so they end the conversation"], "AC"),
    ("Time passes in college and you‚Äôre looking for a job. Do you have a LinkedIn?", ["Yes", "No"], "MN"),
    ("You do not find a job, and the crippling reality of adulthood hits you.", ["Continue"], None),
    ("Unemployed life is difficult, and you start wondering if your principal was right‚Ä¶ Who do you rant to?",
     ["My partner", "My family", "My diary", "Nobody"], "LI"),
    ("Those around you tell you to focus on yourself. How do you spend your free time?",
     ["Going to the gym", "Scrolling Reels", "Learning to cook", "Hanging out with friends"], "MN"),
    ("You eventually land four job offers. Congrats! Which do you accept?",
     ["Staff Accountant", "Children‚Äôs Party DJ", "Copywriter", "Data Entry Clerk"], "AC"),
    ("Yikes", ["Continue"], None),
    ("How do you celebrate the beginning of your new career (which you will be locked into for the next 30-40 years)?",
     ["Black out drinking", "Netflix Marathon", "Bungee Jumping", "Sleep"], "HO")
]

images = {
    0: "sadgirl.png",
    1: "babby.png"

}

# Initialize a counter for the current question
current_question = 0
image_label = None

# Function to handle answer selection and update scores
def handle_answer(answer_idx):
    global current_question, ac_score, ho_score, mn_score, li_score

    # Score updates based on the current question
    if current_question == 2 and answer_idx in [1, 4]:
        ac_score += 1
    elif current_question == 4 and answer_idx in [2, 3]:
        ho_score += 1
    elif current_question == 5 and answer_idx in [1, 2]:
        ac_score += 1
    elif current_question == 8 and answer_idx in [2, 3]:
        ac_score += 1
    elif current_question == 11 and answer_idx in [2, 3]:
        li_score += 1
    elif current_question == 13 and answer_idx in [3, 4]:
        ho_score += 1
    elif current_question == 15 and answer_idx in [1, 3]:
        li_score += 1
    elif current_question == 17 and answer_idx in [1, 2]:
        mn_score += 1
    elif current_question == 18 and answer_idx in [2, 3]:
        ho_score += 1
    elif current_question == 19 and answer_idx in [1, 5]:
        ho_score += 1
    elif current_question == 20 and answer_idx in [1, 3]:
        ac_score += 1
    elif current_question == 21 and answer_idx in [1]:
        mn_score += 1
    elif current_question == 23 and answer_idx in [1, 2]:
        li_score += 1
    elif current_question == 24 and answer_idx in [1, 3]:
        mn_score += 1
    elif current_question == 25 and answer_idx in [1, 4]:
        ac_score += 1
    elif current_question == 27 and answer_idx in [1, 3]:
        ho_score += 1

    current_question += 1

    # Move to the next question or prompt
    if current_question < len(questions):
        show_question()
    else:
        show_result()

# Function to display the current question or prompt
def show_question():
    global question_label, buttons_frame, current_question, image_label

    # Clear previous buttons
    for widget in buttons_frame.winfo_children():
        widget.destroy()

    # Destroy the previous image if it exists
    if image_label is not None:
        image_label.destroy()
    
    # Update the question text
    question_text, options, _ = questions[current_question]
    question_label.config(text=question_text)

    # Check if there's an image for the current question
    if current_question in images:
        try:
            image_path = images[current_question]
            img = Image.open(image_path)  # Load the image
            img = img.resize((300, 300), Image.LANCZOS)  # Resize image
            img_tk = ImageTk.PhotoImage(img)

            image_label = tk.Label(root, image=img_tk)  # Create a new label for the image
            image_label.image = img_tk  # Keep a reference to avoid garbage collection
            image_label.pack(side="top" )  # Pack the image label to position it correctly

        except Exception as e:
            print(f"Error loading image: {e}")  # Handle any errors

    # If there are options, display them as buttons
    if options:
        for idx, option in enumerate(options):
            button = tk.Button(buttons_frame, text=option, command=lambda idx=idx: handle_answer(idx), font=("Courier New", 12), wraplength=200)
            button.pack(side="top", fill="x", padx=10, pady=5)
    else:
        button = tk.Button(buttons_frame, text="Continue", command=next_question)
        button.pack(side="top", fill="x", padx=10, pady=5)

# Function to proceed to the next question
def next_question():
    global current_question
    current_question += 1
    show_question()

# Function to display the final result
def show_result():
    global buttons_frame

    first_letter = "A" if ac_score > 2 else "C"
    second_letter = "H" if ho_score > 2 else "O"
    third_letter = "M" if mn_score > 1 else "N"
    fourth_letter = "L" if li_score > 1 else "I"

    for widget in buttons_frame.winfo_children():
        widget.destroy()

    question_label.config(text="")

    result = first_letter + second_letter + third_letter + fourth_letter
    personality_types = {
        "AHML": "Dreamer",
        "AOML": "Corporate Slave",
        "AHNL": "Future Wine Aunt",
        "AONL": "Rom Com Binger (You‚Äôre also delusional)",
        "AHMI": "Girl Boss",
        "AOMI": "Future CEO (just not now)",
        "AHNI": "Gifted child burnout",
        "AONI": "The Gamer",
        "CHML": "The Romantic",
        "COML": "Stoner Sad Girl",
        "CHNL": "Party Animal",
        "CONL": "Starving Artist",
        "CHMI": "Creative Director üíÖ",
        "COMI": "Cat Person",
        "CHNI": "Crackhead",
        "CONI": "Literally In A Coma"
    }

    result_text = f"Your four letters are: {result}\nYou are the {personality_types.get(result, 'Undefined')}"
    result_label.config(text=result_text)

    restart_button = tk.Button(buttons_frame, text="Play Again?", command=restart_game, font=("Courier New", 14))
    restart_button.pack(side="top", fill="x", padx=10, pady=5)

    exit_button = tk.Button(buttons_frame, text="Nah I'm Done", command=root.quit, font=("Courier New", 14))
    exit_button.pack(side="top", fill="x", padx=10, pady=5)

def restart_game():
    global current_question, ac_score, ho_score, mn_score, li_score

    # Reset scores and current question
    ac_score = 0
    ho_score = 0
    mn_score = 0
    li_score = 0
    current_question = 0

    # Clear the result label
    result_label.config(text="")
    
    # Show the first question again
    show_question()

# Set up the initial window
root = tk.Tk()
root.title("What Type of Sad Girl Are You?")

root.geometry("360x640")
root.resizable(False, False)

result_label = tk.Label(root, text="", font=("Courier New", 18, "bold"), fg="blue", wraplength=350)
result_label.pack(pady=10)

# Set up the question label
question_label = tk.Label(root, text="", font=("Courier New", 16, "bold"), wraplength=350, justify="left")
question_label.pack(pady=20)

# Set up the buttons frame
buttons_frame = tk.Frame(root)
buttons_frame.pack(side="bottom", pady=120, fill="both", expand=True)

# Display the first question or prompt
show_question()

# Start the GUI loop
root.mainloop()